/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

/* 1 */

/**
 * 
 * @param {*} data 需要转换的数据
 * @param {Boolean} canEmpty 是否允许空，处理input输入内容转数字时候可以用到
 * @return {Number|String}
 */

/* 2 */

/**
 * 获取数据类型
 * @param {*} data 
 */

/* 3 */

/**
 * 强制转换json
 * @param {*} data 需要转换的数据
 * @param {*} def 默认数据，如果data不是json，返回此数据
 */

/* 4 */

/**
 * 移除首尾空格
 * @param {*} str 
 */

/* 5 */

/**
 * 添加class
 * @param {object} element # dom元素 
 * @param {String || Array} names # 需要增加的className。可接受单个字符串或数组 
 */

/* 6 */

/* 7 */

/**
 * 改进版forEach，循环中 return 非空数据将执行 break 跳出循环
 * 
 * @param {Array, Object} data 数组
 * @param {Function} handle 处理函数
 * @param {String} type 数据类型，可循环json
 */

/* 8 */

/**
 * 移除class
 * @param {object} element # dom元素 
 * @param {String || Array} cl # 需要移除的className。可接受单个字符串或数组 
 */

/* 9 */

/* 10 */

/**
 * 绑定事件处理函数，同时可以舍去winFun了
 * 同类型，同名，不同函数，绑定最后一个函数
 * @param {Object} oDom 
 * @param {String} name [必需]，自定义绑定的名字，思量再三，为了兼容ie取消事件,所以需要手动取名
 * @param {String} type 事件类型，如：click,mousemove
 * @param {Function} handler 绑定的事件处理函数
 * @param {Boolean} isRemoveBefore 是否移除上一个同名函数，默认 false 可重复绑定。【注：如果为false，解绑的时候只能解绑最后一个】
 */

// 这个方法存在

//先解绑同类型，同名函数，再重新绑定

// 改变this指向

// 最终绑定的函数

// 将本次绑定的函数记录下来，下次判断用

/* 11 */

/**
 * 
 * @param {Object} oDom  
 * @param {String} name [必需]，自定义绑定的名字，思量再三，为了兼容ie取消事件,所以需要手动取名
 * @param {String} type 事件类型，如：click,mousemove
 * @param {Function}  [可选] 解绑
 * 				undefined：当前绑定函数。
 * 				handler 同类型，同名函数的上一个缓存函数(手动传入)
 */

/* 12 */

/* 13 */

/* 14 */

/**
 * 判断一个数据是否为空
 * @param {All} data 需要处理的数据
 * @return {Boolean}
 */

/* 15 */

//移除节点

/* 16 */

/* 17 */

/* 18 */

/* 19 */

/**
 * 获取可视区域宽高
 */

// 

/* 20 */

/**
 * 通过className获取元素
 * 修复了传入父级 undefined 时自动将 body 作为父级的问题
 * 
 * @param {String} className       需要获取的类名
 * @param {Object|String} father   父级对象或者父级ID，如果不传入父级，则父级为body
 * @return {Array}                 返回查找到的所有元素的集合
 */

// var argLen = arguments.length;

// var FatherErr = [];

// if(argLen == 1) {

//     father = document.body;

// }else if(argLen == 2) {

//     var type = getType(father);

//     if(type == 'String') {

//         if(father.length) {

//             father = getById(father);

//         }else {

//             return FatherErr;

//         }

//     }else if(type == 'Undefined') {

//         return FatherErr;

//     }else if(father == null) {

//         return FatherErr

//     }

// }

// if(document.getElementsByClassName) {                  

//     return father.getElementsByClassName(className);

// } else {

//     var tag = father.getElementsByTagName('*');  

//     var tagAll = []; 

//     for(var i=0;i<tag.length;i++){

//         var classArr = tag[i].className.split(' ')

//         for (var j=0; j<classArr.length; j++){

//             if(classArr[j]==className){

//                 tagAll.push(tag[i]);

//                 break;

//             }

//     return tagAll;

/* 21 */

/* 22 */

/* 23 */

/**
 * 生成随机数
 * @param  {Number} min 最小数
 * @param  {Number} max 最大数
 * @return {Number}
 */

/* 24 */

/* 25 */

//获取元素相对窗口的距离

// var scrollPos = getScrollPosition();

/* 26 */

/**
 * 用于绑定后不用取消
 * bind的简化版
 * @param {Boolean} isRemoveBefore 是否移除上一个同名函数，默认 false 可重复绑定
 */

/* 27 */

/* 28 */

/**
 * toFixed()优化版
 * 
 * @param {Number} fix 需要保留几位小数，默认为0
 * 
 * 示例：
 * 	fixed()(100) => 100
 * 	fixed(1)(100) => 100.0
 * 	fixed(2)(100) => 100.00
 *  
 */

/* 29 */

/* 30 */

/* 31 */

/**
 * 获取样式
 * @param {Object} el dom元素
 * @param {String} styleName 样式名
 * @param {Boolean} inlineStyle 是否获取元素行内样式，文本的方式，不是实际的
 */

/* 32 */

//阻止冒泡及默认行为

/* 33 */

/* 34 */

//窗口滚动条的距离

/* 35 */

/**
 * 
 * @param {String} str 
 * @param {*} sign 正负数 ['*', '-', '+']
 * @param {String} integer 是否为整数 ['*', 'int']
 */

// 正负

// 是否整数

/* 36 */

/**
 * 获取最小数字
 * @param {Number} data 
 * @param {Number} min 
 */

/* 37 */

/**
 * 
 * @param {Function} handle 处理主函数 
 * @param {Number} delay 延时
 * @param {Boolean} isFirstWork 第一次是否触发，默认true 
 * @param {Function} onFast 操作频率过快的回调函数 
 */

/* 38 */

/**
 * 获取鼠标滚动方向。简洁优化版
 * @param {Obj}        el          需要滚动的对象。鼠标在对象上才执行
 * @param {Function}   callback    回调函数。滚轮滚动一次反回一个参数，-1：向下。1：向上
 * @param {Boolean}    isPrevent   是否阻止原生滚动，仅用来获取滚动方向
 */

/**
   * ie/chrome : onmousewheel
   *    event.wheelDelta
   *       上：120
   *       下：-120
   * firefox : DOMMouseScroll 必须用addEventListener
   *    event.detail
   *       上：-3
   *       下：3
   * return false阻止的是  obj.on事件名称 = fn 所触发的默认行为
   * addEventListener 绑定的事件需要通过 event 下面的 preventDefault();
   */

//el.onmousewheel = wheel;            

//if (el.addEventListener) el.addEventListener('DOMMouseScroll', wheel, false);

/* 39 */

/* 40 */

/**
 * 工具内部使用的订阅发布，外部无法使用 
 */

/* 41 */

// 事件存放中心

// 基础注册函数

// 事件触发

// 清空整个 bus

// 清空一个 bus 实例

// 【注册】 永久函数

// 【注册】 一次性函数

// 【注册】 永久唯一函数

// 【注册】 一次性唯一函数

/* 42 */

/* 43 */

/* 44 */

/**
 * 将所有可枚举属性的值从一个或多个源对象复制到目标对象
 * @return {Object} 返回对象，第一个对象被改变
 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/*



symbolNumber('+')
symbolNumber('-')
symbolNumber('.')
symbolNumber('.5')
symbolNumber('+1.25.36')
symbolNumber('-1.25')
symbolNumber(0)
symbolNumber('')
symbolNumber(false)
symbolNumber(true)
symbolNumber({})
symbolNumber('0')
symbolNumber([])
symbolNumber(function () {})
symbolNumber(/abc/)

symbolNumber(0/1)
symbolNumber(1/0)

symbolNumber(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)

symbolNumber('张胜男1啊3二维4')
symbolNumber('2.张胜男1啊3二维4')



*/

/**
 * 
 * @param {*} data 需要转换的数据
 * @param {Boolean} isDecimals 是否小数，如果不是，将自动移除小数点
 * @return {Number|String}
 * @description 多用于表单数字输入可为 【空字符，正，负】情况下
 */

// 保留正负符号

// 清空第一个点后后面的点和所有的非数字字符

/* 50 */

/**
 * 计算平均数
 * @param {Number} section 分成几份，最小值为1
 * @param {Number} num 被分的数字
 * @param {Number} decimal 保留几位小数，默认0
 */

/* 51 */

// 生成随机条码

/***
 * 首先，把条形码从右往左依次编序号为“1,2,3,4……”从序号二开始把所有偶数序号位上的数相加求和，用求出的和乘3，再从序号三开始把所有奇数序号上的数相加求和，用求出的和加上刚才偶数序号上的数，然后得出和。再用10减去这个和的个位数，就得出校验码。
举个例子：此条形码为：977167121601X（X为校验码）。
1．1+6+2+7+1+7=24
2．24×3=72
3．0+1+1+6+7+9=24
4．72+24=96

5．10-6=4

所以最后校验码X=4。此条形码为9771671216014。
如果第5步的结果个位为10，校验码是0；也就是说第4步个位为0的情况.
 */

// 验证条码尾数

// 验证整个条码是否合法

//console.log(`${oushu}偶数和：`, o_num)

//console.log('偶数3倍：', d3)

//console.log(`${jishu}奇数和 + 偶数3倍：`, j_num)

// console.log('10-各位 得出校验码：', ck)

/* 52 */

/**
 * 插入静态<style></style>至文档
 * 如果存在相同ID，则不执行
 * 
 * @param {String} id 样式表ID 
 * @param {String} cssTXT 样式
 * @param {Function} callback 创建成功回调
 */

/* 53 */

/**
 * 生成随机ID
 */

/* 54 */

/* 55 */

/**
 * 拖拽
 * @param {Object} opt
 *    @param {Element} opt.oHandle 拖拽触发对象
 *    @param {Element} opt.oWrapper 拖拽相应容器
 *    @param {Element} opt.oFather 拖拽父级容器，默认body 
 * @return {Object}
 *    @param {Function} updateFahter 更新父容器
 */

/* 56 */

//获取cookie

/* 57 */

// getQuery('name=张三'); // => { name: "张三" }

// getQuery('???name=张三?&?age=26'); // => { name: "张三", age: "26" }

// getQuery(null); // => {}

// getQuery(undefined); // => {}

// getQuery(''); // => {}

// getQuery('abc'); // => {}

/**
 * getQuery 获取url查询参数
 * @param {String} str # [可选], 被查询的字符串，不填则为当前url
 * @return {Object} json对象
 */

/* 58 */

/**
 * 判断是否是电话
 * @param {*} str 
 */

/* 59 */

// 检测是否已存在loading

// 上面先检查loading是否实例化

/* 60 */

/**
 * 获取最大数字
 * @param {Number} data 
 * @param {Number} min 
 */

/* 61 */

/* 62 */

/**
 * 抛物线
 */

/* 63 */

//删除cookie

/* 64 */

//设置cookie 

// t 单位（毫秒）

//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//

// 不能这样写[目前知道百度浏览器这样写会有bug，获取cookie【document.cookie】的时候会把cookie删除]，一定要像下面这样写

// oDate = oDate.toGMTString(); 

/* 65 */

/**
 * 字符串转数组，空字符串转为空数组（原生方法会将空字符串转成长度为1的数组，不好用）
 * @param str {String} 需要转的字符串
 * @param flag {String} 需要分隔的标识符
 */

/* 66 */

/**
 * 数组去重，返回新数组
 * @param {Array} arr 需要去重的数组
 * @param {Boolean} vague [可选]是否模糊去重; 默认：false; false: [3, '3'] => [3,'3']; true: [3, '3'] => [3];   
 */

/* 67 */

// 保证下一次的第一次可以执行

/* 68 */

/**
 * 一次性函数，使用一次后失效
 * @param {Function} handle 主函数
 * @return {Function}
 */

/* 69 */

/**
 * 
 * @param {Object} opt 配置json
 *  @key {Function} opt.handle 主函数
 *  @key {Function} opt.onFast 操作过快函数
 */

/* 70 */

// 停止

// 开始

// this 指向

// 【继续】 回调

// 【停止】 回调

// 本次执行次数

/* 71 */

//获取当前时间

/* 72 */

/**
 * 
 * title
 * msg
 * startClose
 * closed
 * onShow
 */

// 监听ESC按键

/* 73 */

/*

// 初始化
const iPro = Progress()

// 开始运动
iPro.run()

// 一定时间后走到最后
iPro.goTo(100)



*/

/* 74 */

//文档加载完成【仅指文档就绪，图片等资源可能没有加载完成】

/* 75 */

/**
 * 获取当前执行js的路径
 * @param {Number} // 【默认0】 向上取几级目录
 */

/* 76 */

// 获取上下月信息

// 获取某天星期几

// 下月数据

// 上月数据

// 本月数据

// 本月数据数组

//日历数据数组，日历使用

// 第一天星期几

// 今天星期几

// 下月时间戳

/* 77 */

/**
 * 
 * @param {Dom} el 返回顶部的容器，默认body 
 */

/* 78 */

/**
 * 获取事件元素
 * 
 * @param {Event} e 事件
 * @return {Element} 发生事件的 DOM 元素 
 */

/* 79 */

/**
 * 正则千分位转换
 * @param {Num} str 需要转换的字符 
 * @param {Sting} symbol 千分位替换符号，默认逗号 
 */

/**


零【一二三四五六七八九十】 -> false -> 結果：零一二三四五六七八九十

零一【二三四五六七八九十】 -> true -> 結果：零一，二三四五六七八九十
零一二【三四五六七八九十】 -> false -> 結果：零一，二三四五六七八九十
零一二三【四五六七八九十】 -> false -> 結果：零一，二三四五六七八九十

零一二三四【五六七八九十】 -> true -> 結果：零一，二三四，五六七八九十
零一二三四五【六七八九十】 -> false -> 結果：零一，二三四，五六七八九十
零一二三四五六【七八九十】 -> false -> 結果：零一，二三四，五六七八九十

零一二三四五六七【八九十】 -> true -> 結果：零一，二三四，五六七，八九十
零一二三四五六七八【九十】 -> false -> 結果：零一，二三四，五六七，八九十
零一二三四五六七八九【十】 -> false -> 結果：零一，二三四，五六七，八九十
零一二三四五六七八九十 -> false -> 結果：零一，二三四，五六七，八九十


*/

// 任意字符版

// return str.toString().replace(/\B(?=(\d{3})+(?!\d))/g, symbol || ',');

/* 80 */

/* 81 */

/**
 * 获取图片原始尺寸
 * onload 要在 img.src 赋值前
 * 
 * @param src              图片链接
 * @param callback(json)   回调函数
 */

/* 82 */

/* 83 */

/**
 * 仅给数组中当前索引的对象添加class  其余对象移除class
 * toggleClass 改名为 onlyOneAddClass
 * @param arr          对象合集的数组
 * @param index        当前对象的下标
 * @param className    需要切换的class  
 */

/* 84 */

/**
 * 将字符串中 [start, end] 中间的替换成自定义符号
 * @param {Sting} str 需要替换的字符串
 * @param {Number} start 开始位置
 * @param {Number} end 结束位置
 * @param {String} flag 自定义字符
 */

/* 85 */

//

/* 86 */

// 总页数

// 跳转

// 获取需要显示的页数

// 计算显示页码的开始和结尾

// 处理尾页

// 处理起始页

/* 87 */

/* 88 */

/**
 * 清空[undefined, null]数据
 * @param {*} data
 */

/* 89 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

// arr 不是数组 或者 handle 不是方法，就返回 initVal

/* 95 */

/* 96 */

/**
 * 
 * @param {Dom} el 需要滚动到底部的目标节点
 * @param {Function} callback 滚动完成的回调
 */

/* 97 */

/**
 * 
 * @param {Dom} el 跟随容器
 * @param {Object} opt 配置
 */

/* 98 */

/* 99 */

/* 100 */

/* 101 */

/* 102 */
